#include <stdio.h>
// these are just for timing measurments
#include <time.h>

// error checking macro
#define cudaCheckErrors(msg) \
    do { \
        cudaError_t __err = cudaGetLastError(); \
        if (__err != cudaSuccess) { \
            fprintf(stderr, "Fatal error: %s (%s at %s:%d)\n", \
                msg, cudaGetErrorString(__err), \
                __FILE__, __LINE__); \
            fprintf(stderr, "*** FAILED - ABORTING\n"); \
            exit(1); \
        } \
    } while (0)

/* You should not change the value of DSIZE */
const int DSIZE = 184; //18432
int block_size = 8;
const float A_val = 3.0f;
const float B_val = 2.0f;
const int b_size = 4;

__global__ void global_mmul(const float *A, const float *B, float *C, int ds) 
{

  int idx = threadIdx.x+blockDim.x*blockIdx.x; // create thread x index
  int idy = threadIdx.y+blockDim.y*blockIdx.y; // create thread y index

  if ((idx < ds) && (idy < ds)){
    float temp = 0;
    for (int i = 0; i < ds; i++)
      temp += A[idy*ds+i] * B[i*ds+idx];   // dot product of row and column
    C[idy*ds+idx] = temp;
  }
}

// matrix multiply (naive) kernel: C = A * B
__global__ void mmul( float *A, float *B, float *C, int dst) 
{
    int idx = threadIdx.x + blockDim.x * blockIdx.x; int idy = threadIdx.y + blockDim.y * blockIdx.y; int bs = blockDim.x; int ds = DSIZE; int tx = threadIdx.x; int ty = threadIdx.y; float Cvalue = 0;
    extern __shared__ float s[];
    for (int m = 0; m < ((ds + bs - 1) / bs); m = m + b_size) {
        for (int tmp = 0; tmp < b_size; tmp = tmp + 1){
            if (idy < ds && ((m + tmp) * bs + tx) < ds) s[ty*bs * b_size + tx + tmp * bs] = A[idy * ds +  (m + tmp) * bs + tx];
            else                                        s[ty*bs * b_size + tx + tmp * bs] = 0;
            if (idx < ds && ((m + tmp) * bs + ty) < ds) s[ty*bs + tx + (tmp + b_size) * bs * bs] = B[((m + tmp) * bs + ty) * ds + idx];
            else                                        s[ty*bs + tx + (tmp + b_size) * bs * bs] = 0;
        }
        __syncthreads();
        for (int e = 0; e < bs * b_size; ++e) Cvalue += s[ty * bs * b_size + e] * s[e * bs + tx + b_size * bs * bs];
        __syncthreads();
    }
    if (idy < ds && idx < ds) C[idy*ds + idx] = Cvalue;
}

int main(int argc, char *argv[])
{

  float *h_A, *h_B, *h_C, *h_C1, *d_A, *d_B, *d_C;

  // these are just for timing
  clock_t t0, t1, t2;
  double t1sum=0.0;
  double t2sum=0.0;

  if (argc == 2) {
      block_size = atoi(argv[1]);
      if (block_size <= 0) {
          fprintf(stderr, "Error: block_size should be >= 1\n");
          exit (1);
      }
  }

  // start timing
  t0 = clock();

  h_A = new float[DSIZE*DSIZE];
  h_B = new float[DSIZE*DSIZE];
  h_C = new float[DSIZE*DSIZE];
  //h_C1 = new float[DSIZE*DSIZE];

  for (int i = 0; i < DSIZE*DSIZE; i++){
        h_A[i] = A_val;
        h_B[i] = B_val;
        h_C[i] = 0;
        //h_C1[i] = 0;
  }
  printf("Init took %f seconds.  Begin compute\n", t1sum);

  // Initialization timing
  t1 = clock();
  t1sum = ((double)(t1-t0))/CLOCKS_PER_SEC;
  printf("Init took %f seconds.  Begin compute\n", t1sum);

  // Allocate device memory and copy input data over to GPU
  cudaMalloc(&d_A, DSIZE*DSIZE*sizeof(float));
  cudaCheckErrors("cudaMalloc failure");
  cudaMalloc(&d_B, DSIZE*DSIZE*sizeof(float));
  cudaCheckErrors("cudaMalloc failure");
  cudaMalloc(&d_C, DSIZE*DSIZE*sizeof(float));
  cudaCheckErrors("cudaMalloc failure");

  cudaMemcpy(d_A, h_A, DSIZE*DSIZE*sizeof(float), cudaMemcpyHostToDevice);
  cudaCheckErrors("cudaMemcpy H2D failure");
  cudaMemcpy(d_B, h_B, DSIZE*DSIZE*sizeof(float), cudaMemcpyHostToDevice);
  cudaCheckErrors("cudaMemcpy H2D failure");

  // Cuda processing sequence step 1 is complete

  // Launch kernel
  dim3 block(block_size, block_size);  // dim3 variable holds 3 dimensions
  dim3 grid((DSIZE+block.x-1)/block.x, (DSIZE+block.y-1)/block.y);
  mmul<<<grid, block, sizeof(float)*block_size*block_size*2 * b_size>>>(d_A, d_B, d_C, block_size);
  cudaCheckErrors("kernel launch failure");

  // Cuda processing sequence step 2 is complete
  // Copy results back to host
  cudaMemcpy(h_C, d_C, DSIZE*DSIZE*sizeof(float), cudaMemcpyDeviceToHost);
  cudaCheckErrors("cudaMemcpy D2H failure");

  // GPU timing
  t2 = clock();
  t2sum = ((double)(t2-t1))/CLOCKS_PER_SEC;
  printf ("Done. Compute took %f seconds\n", t2sum);


  for (int i = 0; i < DSIZE*DSIZE; i++) if (h_C[i] != A_val*B_val*DSIZE) {printf("mismatch at index %d, was: %f, should be: %f\n", i, h_C[i], A_val*B_val*DSIZE); return -1;}
  //
  // global_mmul<<<grid, block>>>(d_A, d_B, d_C, DSIZE);
  // cudaCheckErrors("kernel launch failure");
  // cudaMemcpy(h_C1, d_C, DSIZE*DSIZE*sizeof(float), cudaMemcpyDeviceToHost);
  // cudaCheckErrors("cudaMemcpy D2H failure");
  // for (int i = 0; i < DSIZE*DSIZE; i++) {
  //  if (h_C[i] != h_C1[i]) {
  //    printf("mismatch at index %d, was: %f, should be: %f\n", i, h_C[i], h_C1[i]);
  //    return -1;
  //  }
  // }

  printf("Success!\n"); 

  //Free memory
  free(h_A);
  free(h_B);
  free(h_C);
  // free(h_C1);
  cudaFree(d_A);
  cudaFree(d_B);
  cudaFree(d_C);

  return 0;
}
  
